openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8095
    description: Generated server url
paths:
  /photo360/authorization/changePassword:
    put:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Endpoint allows to change currently logged user, public api key and\
        \ jwt token is required to authenticate user."
      operationId: changePassword
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequestDto'
        required: true
      responses:
        "200":
          description: Password successfully changed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "401":
          description: Passed jwt token not valid/expired/unauthorized role or passed
            wrong old password.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "406":
          description: Wrong field validation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by passed token.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "409":
          description: Email is not verified.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/addToFavourite/{gifId}:
    put:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint used to save public/personal gif to favourite, public api\
        \ key and currently logged user's jwt token is required."
      operationId: addToFavourite
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: gifId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "405":
          description: Gif already marked as favourite.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "406":
          description: Gif is not public.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by passed token/gif with passed id not exists.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "200":
          description: Gif added to favourite.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/uploadPhotos:
    post:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint allows to upload user's photos to create a gif, public api\
        \ key and currently logged user's jwt token is required."
      operationId: uploadPhoto
      parameters:
        - name: isPublic
          in: query
          required: true
          schema:
            type: boolean
        - name: description
          in: query
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - zipFile
              type: object
              properties:
                zipFile:
                  type: string
                  format: binary
      responses:
        "406":
          description: Unsupported zip/file format.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "200":
          description: Photos uploaded successful.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by passed token.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/resetPasswordRequest:
    post:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Endpoint allows to send email request for password request, required\
        \ to pass public api key."
      operationId: requestPasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestDto'
        required: true
      responses:
        "200":
          description: Email successfully send.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "423":
          description: "User account is locked, too many unsuccessful login requests."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "409":
          description: Email is not verified verified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/resetPasswordConfirmation:
    post:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Endpoint allows to reset user's password, required to pass public\
        \ api key, new password and generated reset password token."
      operationId: confirmPasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestDto'
        required: true
      responses:
        "401":
          description: UReset token expired.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by given email.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "200":
          description: Password changed successful.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "406":
          description: Passed same password as old one/validation not passed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "409":
          description: Email is not verified verified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/register:
    post:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Create new user, public api key is required."
      operationId: createNewUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
        required: true
      responses:
        "403":
          description: User was given login/email already exists.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "406":
          description: Wrong field validation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "201":
          description: Successfully registered.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/login:
    post:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Endpoint to authenticate user, public api key is required."
      operationId: logIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
        required: true
      responses:
        "423":
          description: "User account is locked, too many unsuccessful login requests."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        "401":
          description: Wrong password.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        "404":
          description: User was not found by given login.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        "202":
          description: "Successfully logged, returns jwt token with user details."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /photo360/getFavourites:
    get:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint which returns all user's favourites gifs, public api key\
        \ and currently logged user's jwt token is required."
      operationId: getFavourites
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "404":
          description: User was not found by passed token
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
        "200":
          description: Removed gif from favourite.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadPublicGifs:
    get:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint to get all public gifs, public api key and currently logged\
        \ user's jwt token is required."
      operationId: downloadPublicGif
      responses:
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
        "200":
          description: Returns public gifs.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadPrivateGifs:
    get:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint to get all private gifs, public api key and currently logged\
        \ user's jwt token is required."
      operationId: downloadPrivateGif
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Returns private gifs.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
        "404":
          description: User was not found by passed token.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadGif/{gifId}:
    get:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint to get specific public gif or private owned by logged user\
        \ by id, public api key and currently logged user's jwt token is required."
      operationId: downloadGif
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: gifId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhotoDataDto'
        "200":
          description: Returns gif.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhotoDataDto'
        "406":
          description: Gif is not public.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhotoDataDto'
        "404":
          description: User was not found by passed token/gif with passed id not exists.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadAllGifs:
    get:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint to get all gifs in database, allowed only for admin role,\
        \ public api key and currently logged user's jwt token is required."
      operationId: downloadAllGif
      responses:
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
        "200":
          description: Returns gifs.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/authorization/emailConfirmationRequest:
    get:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Endpoint allows to send verification email to currently logged user,\
        \ required to pass public api key and currently logged user's jwt token."
      operationId: sendConfirmEmailRequest
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Email successfully send.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "401":
          description: Passed jwt token not valid/expired/unauthorized.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by passed token.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "406":
          description: Email already verified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/confirmEmail/{emailVerificationCode}:
    get:
      tags:
        - "Authorization controller, each endpoint requires public api key."
      summary: "Endpoint allows to verify user email, required to pass public api\
        \ key, currently logged user's jwt token and verification code."
      operationId: confirmEmail
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: emailVerificationCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "401":
          description: Passed jwt token not valid/expired/unauthorized.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "200":
          description: Email successfully verified.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by passed token.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "406":
          description: Email already verified/email token not valid/email token expired.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/removeGif/{gifId}:
    delete:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint to remove gif, which is owned by currently logged user, also\
        \ allows to remove any gif, if user has admin role, public api key is required."
      operationId: removeUserGif
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: gifId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Gif removed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: User was not found by passed token.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/removeFromFavourite/{gifId}:
    delete:
      tags:
        - "Photo360 main functions controller, each endpoint requires public api key."
      summary: "Endpoint used to remove public/personal gif from favourite, public\
        \ api key and currently logged user's jwt token is required."
      operationId: removeFromFavourite
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: gifId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "401":
          description: Passed jwt token not valid/expired/unauthorized role.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "404":
          description: "User was not found by passed token, gif was not marked as\
            \ favourite."
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
        "200":
          description: Removed gif from favourite.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
components:
  schemas:
    PasswordChangeRequestDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    RequestResponseDto:
      type: object
      properties:
        responseMessage:
          type: string
        statusType:
          type: string
        statusCode:
          type: integer
          format: int32
    ResetPasswordRequestDto:
      type: object
      properties:
        email:
          type: string
        newPassword:
          type: string
        resetPasswordToken:
          type: string
    RegisterRequestDto:
      type: object
      properties:
        login:
          type: string
        email:
          type: string
        password:
          type: string
    LoginRequestDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    LoginResponseDto:
      type: object
      properties:
        email:
          type: string
        get_token:
          type: string
        emailVerified:
          type: boolean
        get_tokenExpirationDate:
          type: string
          format: date-time
        get_lastLoggedDatetime:
          type: string
          format: date-time
        userRolesList:
          uniqueItems: true
          type: array
          items:
            type: string
    PhotoDataDto:
      type: object
      properties:
        gif:
          type: array
          items:
            type: string
            format: byte
        gifId:
          type: integer
          format: int64
        userLogin:
          type: string
        description:
          type: string
        uploadDateTime:
          type: string
          format: date-time
        public:
          type: boolean
