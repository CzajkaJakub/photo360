openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8095
  description: Generated server url
paths:
  /photo360/authorization/changePassword:
    put:
      tags:
      - Authorization controller
      summary: Endpoint which requires public api key to authenticate user
      operationId: changePassword
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/addToFavourite/{gifId}:
    put:
      tags:
      - Photo360 main functions controller
      summary: Endpoint used to save public/personal gif to favourite.
      operationId: addToFavourite
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      - name: gifId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/uploadPhotos:
    post:
      tags:
      - Photo360 main functions controller
      summary: Endpoint to upload user's photos.
      operationId: uploadPhoto
      parameters:
      - name: isPublic
        in: query
        required: true
        schema:
          type: boolean
      - name: description
        in: query
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - zipFile
              type: object
              properties:
                zipFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/resetPasswordRequest:
    post:
      tags:
      - Authorization controller
      operationId: requestPasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/resetPasswordConfirmation:
    post:
      tags:
      - Authorization controller
      operationId: confirmPasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/register:
    post:
      tags:
      - Authorization controller
      summary: Endpoint which requires public api key to create new user
      operationId: createNewUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/login:
    post:
      tags:
      - Authorization controller
      summary: "Endpoint to authenticate user, public api key is required"
      operationId: logIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /photo360/getFavourites:
    get:
      tags:
      - Photo360 main functions controller
      summary: Endpoint which returns all user's favourites gifs.
      operationId: getFavourites
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadPublicGifs:
    get:
      tags:
      - Photo360 main functions controller
      summary: Endpoint to get all public gifs.
      operationId: downloadPublicGif
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadPrivateGifs:
    get:
      tags:
      - Photo360 main functions controller
      summary: "Endpoint to get all private gifs, which are owned by logged user."
      operationId: downloadPrivateGif
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadGif/{gifId}:
    get:
      tags:
      - Photo360 main functions controller
      summary: Endpoint to get specific public gif or private owned by logged user
        by id.
      operationId: downloadGif
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      - name: gifId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PhotoDataDto'
  /photo360/downloadAllGifs:
    get:
      tags:
      - Photo360 main functions controller
      summary: "Endpoint to get all gifs in database, allowed only for admin user."
      operationId: downloadAllGif
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoDataDto'
  /photo360/authorization/emailConfirmationRequest:
    get:
      tags:
      - Authorization controller
      operationId: sendConfirmEmailRequest
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/authorization/confirmEmail/{emailVerificationCode}:
    get:
      tags:
      - Authorization controller
      operationId: confirmEmail
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      - name: emailVerificationCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/removeGif/{gifId}:
    delete:
      tags:
      - Photo360 main functions controller
      summary: "Endpoint to remove gif, which is owned by logged user, also allows\
        \ to remove any gif, if user has admin role"
      operationId: removeUserGif
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      - name: gifId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
  /photo360/removeFromFavourite/{gifId}:
    delete:
      tags:
      - Photo360 main functions controller
      summary: Endpoint used to remove public/personal gif from favourites.
      operationId: removeFromFavourite
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      - name: gifId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RequestResponseDto'
components:
  schemas:
    PasswordChangeRequestDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    RequestResponseDto:
      type: object
      properties:
        responseMessage:
          type: string
        statusType:
          type: string
        statusCode:
          type: integer
          format: int32
    ResetPasswordRequestDto:
      type: object
      properties:
        email:
          type: string
        newPassword:
          type: string
        resetPasswordToken:
          type: string
    RegisterRequestDto:
      type: object
      properties:
        login:
          type: string
        email:
          type: string
        password:
          type: string
    LoginRequestDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    LoginResponseDto:
      type: object
      properties:
        email:
          type: string
        get_token:
          type: string
        emailVerified:
          type: boolean
        get_tokenExpirationDate:
          type: string
          format: date-time
        get_lastLoggedDatetime:
          type: string
          format: date-time
        userRolesList:
          uniqueItems: true
          type: array
          items:
            type: string
    PhotoDataDto:
      type: object
      properties:
        gif:
          type: array
          items:
            type: string
            format: byte
        gifId:
          type: integer
          format: int64
        userLogin:
          type: string
        description:
          type: string
        uploadDateTime:
          type: string
          format: date-time
        public:
          type: boolean
